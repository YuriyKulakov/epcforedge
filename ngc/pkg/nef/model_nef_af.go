/* SPDX-License-Identifier: Apache-2.0
* Copyright (c) 2019 Intel Corporation
 */

package ngcnef

// SubscribedEvent :Identifies a UP path management event the AF requested to
// be notified of
type SubscribedEvent string

/*
// List of SubscribedEvent
const (
	//UP_PATH_CHANGE SubscribedEvent = "UP_PATH_CHANGE" >> causing lint error
	UpPathChange SubscribedEvent = "UP_PATH_CHANGE"
)
*/

// TrafficInfluSub is Traffic Influence Subscription structure
type TrafficInfluSub struct {
	// Identifies a service on behalf of which the AF is issuing the request.
	AfServiceID string `json:"afServiceId,omitempty"`
	// Identifies an application.
	AfAppID string `json:"afAppId,omitempty"`
	// Identifies an NEF Northbound interface transaction, generated by the AF.
	AfTransID string `json:"afTransId,omitempty"`
	// Identifies data network name
	Dnn Dnn `json:"dnn,omitempty"`
	// Network slice identifier
	Snssai Snssai `json:"snssai,omitempty"` //p
	// string containing a local identifier followed by \"@\" and
	// a domain identifier.
	// Both the local identifier and the domain identifier shall be encoded as
	// strings that do not contain any \"@\" characters.
	// See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more information.
	ExternalGroupID ExternalGroupID `json:"externalGroupId,omitempty"`
	// Identifies the requirement to be notified of the event(s).
	SubscribedEvents []SubscribedEvent `json:"subscribedEvents,omitempty"`
	//Generic Public Servie Identifiers asssociated wit the UE
	Gpsi Gpsi `json:"gpsi,omitempty"`
	// string identifying a Ipv4 address formatted in the \"dotted decimal\"
	//notation as defined in IETF RFC 1166.
	Ipv4Addr Ipv4Addr `json:"ipv4Addr,omitempty"`
	// string identifying a Ipv6 address formatted according to clause 4
	// in IETF RFC 5952.
	Ipv6Addr Ipv6Addr `json:"ipv6Addr,omitempty"`
	// string identifying mac address of UE
	MacAddr MacAddr48 `json:"macAddr,omitempty"`
	// Identifies the type of notification regarding UP path management event.
	// Possible values are:
	// EARLY - early notification of UP path reconfiguration.
	// EARLY_LATE - early and late notification of UP path reconfiguration.
	// This value shall only be present in the subscription to the
	// DNAI change event.
	// LATE - late notification of UP path reconfiguration.
	DnaiChgType DnaiChangeType `json:"dnaiChgType,omitempty"`
	// URL where notifications shall be sent
	NotificationDestination Link `json:"notificationDestination,omitempty"`
	// Configuration used for sending notifications though web sockets
	WebsockNotifConfig WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	// URL of created subscription resource
	Self Link `json:"self,omitempty"`
	// Identifies IP packet filters.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`
	// Identifies Ethernet packet filters.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	// Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`
	// Settings for temporary validity of the subscription
	TempValidities []TemporalValidity `json:"tempValidities,omitempty"`
	// Identifies a geographic zone that the AF request applies only to the
	// traffic of UE(s) located in this specific zone.
	ValidGeoZoneIDs []string `json:"validGeoZoneIds,omitempty"`
	// String identifying supported features per Traffic Influence service
	SuppFeat SupportedFeatures `json:"suppFeat,omitempty"`
	// Identifies whether an pplication can be relocated once a location of the
	// application has been selected.Set to "true" if it can be relocated;
	// otherwise set to
	// "false". Default value is "false" if omitted.
	AppReloInd bool `json:"appReloInd,omitempty"`
	//Identifies whether the AF request applies to any UE. This attribute shall
	// set to "true" if
	// applicable for any UE, otherwise, set to "false"
	AnyUeInd bool `json:"anyUeInd,omitempty"`
	// Set to true by the AF to request the NEF to send a test notification.
	//Set to false or omitted otherwise.
	RequestTestNotification bool `json:"requestTestNotification,omitempty"`
}

// TrafficInfluSubPatch Traffic Influence Subscription Patch structure
type TrafficInfluSubPatch struct {
	// Identifies whether an application can be relocated once a location of
	// the application has been selected.
	AppReloInd bool `json:"appReloInd,omitempty"`
	// Identifies IP packet filters.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`
	// Identifies Ethernet packet filters.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	// Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`
	// Settings for temporary validity of the subscription
	TempValidities []TemporalValidity `json:"tempValidities,omitempty"`
	// Identifies a geographic zone that the AF request applies only to the
	// traffic of UE(s) located in this specific zone.
	ValidGeoZoneIDs []string `json:"validGeoZoneIds,omitempty"`
}

// EventNotification The UP management event notification is provided by the
// NEF to the AF through the POST method
type EventNotification struct {
	// Identifies an NEF Northbound interface transaction, generated by the AF
	AfTransID string `json:"afTransId,omitempty"`
	// Identifies the type of notification regarding UP path management event.
	DnaiChgType DnaiChangeType `json:"dnaiChgType"`
	// Identifies the N6 traffic routing information associated to the source
	// DNAI. Shall be present if the "subscribedEvent" sets to "UP_PATH_CHANGE".
	SourceTrafficRoute RouteToLocation `json:"sourceTrafficRoute,omitempty"`
	// Identifies a UP path management event the AF requested to be notified of
	SubscribedEvent SubscribedEvent `json:"subscribedEvent,omitempty"`
	// Identifies the N6 traffic routing information associated to the target
	// DNAI. Shall be present if the "subscribedEvent" sets to "UP_PATH_CHANGE".
	TargetTrafficRoute RouteToLocation `json:"targetTrafficRoute,omitempty"`
	// Identifies a user
	Gpsi Gpsi `json:"gpsi,omitempty"`
	// The IPv4 Address of the served UE for the source DNAI.
	SrcUeIpv4Addr Ipv4Addr `json:"srcUeIpv4Addr,omitempty"`
	// The Ipv6 Address Prefix of the served UE for the source DNAI.
	SrcUeIpv6Prefix Ipv6Prefix `json:"srcUeIpv6Prefix,omitempty"`
	// The IPv4 Address of the served UE for the target DNAI.
	TgtUeIpv4Addr Ipv4Addr `json:"tgtUeIpv4Addr,omitempty"`
	// The Ipv6 Address Prefix of the served UE for the target DNAI.
	TgtUeIpv6Prefix Ipv6Prefix `json:"tgtUeIpv6Prefix,omitempty"`
	// UE MAC address of the served UE
	UeMac MacAddr48 `json:"ueMac,omitempty"`
}

// TemporalValidity Indicates the time interval(s) during which the AF request
// is to be applied
type TemporalValidity struct {
	// string with format \"date-time\" as defined in OpenAPI.
	StartTime string `json:"startTime,omitempty"`
	// string with format \"date-time\" as defined in OpenAPI.
	StopTime string `json:"stopTime,omitempty"`
}

// Pfd is the structure of Packet Flow Description for an external Application
// Identifier
type Pfd struct {
	// Identifies a PDF of an application identifier.
	PfdId string `json:"pfdId"`
	// Represents a 3-tuple with protocol, server ip and server port for UL/DL
	// application traffic. The content of the string has the same encoding as
	// the IPFilterRule AVP value as defined in IETFÂ RFCÂ 6733.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`
	// Indicates a URL or a regular expression which is used to match the
	// significant parts of the URL.
	Urls []string `json:"urls,omitempty"`
	// Indicates an FQDN or a regular expression as a domain name matching
	// criteria.
	DomainNames []string `json:"domainNames,omitempty"`
}

// PfdData is the type that represents a PFD request to add, update or remove
// PFD(s) for one external application identifier provided by AF
type PfdData struct {
	// Each element uniquely identifies external application identifier
	ExternalAppId string `json:"externalAppId"`
	// Link to the resource. This parameter shall be supplied by the NEF in
	// HTTP responses that include an object of PfdData type
	Self Link `json:"self,omitempty"`
	// Contains the PFDs of the external application identifier. Each PFD is
	// identified in the map via a key containing the PFD identifier.
	Pfds map[string]Pfd `json:"pfds"`
	// Indicates that the list of PFDs in this request should be deployed within
	// the time interval indicated by the Allowed Delay
	AllowedDelay DurationSecRm `json:"allowedDelay,omitempty"`
	// SCEF supplied property, inclusion of this property means the allowed
	// delayed cannot be satisfied, i.e. it is smaller than the caching time,
	// but the PFD data is still stored.
	CachingTime DurationSecRo `json:"cachingTime,omitempty"`
}

// PfdManagement resource for a PFD management request
type PfdManagement struct {
	// Link to the resource "Individual PFD Management Transaction".
	// This parameter shall be supplied by the NEF in HTTP responses.
	Self Link `json:"self,omitempty"`
	// String identifying supported optional features of PFD Management
	// This attribute shall be provided in the POST request and in the
	// response of successful resource creation.
	SuppFeat SupportedFeatures `json:"suppFeat,omitempty"`
	// Each element uniquely identifies the PFDs for an external application
	// identifier. Each element is identified in the map via an external
	// application identifier as key. The response shall include successfully
	// provisioned PFD data of application(s).
	PfdDatas map[string]PfdData `json:"pfdDatas"`
	// Supplied by the AF and contains the external application identifiers
	// for which PFD(s) are not added or modified successfully. The failure
	// reason is also included. Each element provides the related information for
	// one or more external application identifier(s) and is identified in the
	// map via the failure identifier as key.
	PfdReports map[string]PfdReport `json:"pfdReports,omitempty"`
}

// FailureCode represents the failure reason of the PFD management
type FailureCode string

// Possible values of FailureCode
const (
	// This value indicates that something functions wrongly in PFD provisioning
	// or the PFD provisioning does not function at all.
	MALFUNCTION FailureCode = "MALFUNCTION"
	// This value indicates there is resource limitation for PFD storage.
	RESOURCE_LIMITATION = "RESOURCE_LIMITATION"
	// This value indicates that the allowed delay is too short and PFD(s) are
	// not stored
	SHORT_DELAY = "SHORT_DELAY"
	// The received external application identifier(s) are already provisioned
	APP_ID_DUPLICATED = "APP_ID_DUPLICATED"
	// Other reason specified
	OTHER_REASON = "OTHER_REASON"
)

// PfdRreport is the type that represents a PFD report to indicate the
// external application identifier(s) which PFD(s) are not added or
// modified successfully and corresponding failure reason.
type PfdReport struct {
	// Identifies the external application identifier(s) which PFD(s) are not
	// added or modified successfully
	ExternalAppIds []string `json:"externalAppIds"`
	// Identifies the failure reason
	FailureCode FailureCode `json:"failureCode"`
	// It shall be included when the allowed delayed cannot be satisfied, i.e.
	// it is smaller than the caching time configured in fetching PFD.
	CachingTime DurationSec `json:"cachingTime,omitempty"`
}
